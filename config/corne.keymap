/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        Gui_and_lay1: Gui_and_lay1 {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_AND_LAY1";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND>, <&gui_layer1>, <&gui_shft_1>;

            tapping-term-ms = <300>;
        };
        shft_mod1: shft_mod1 {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT_MOD1";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&mo 1>;

            tapping-term-ms = <300>;
        };
        cntrl_andlayer1: cntrl_andlayer1 {
            compatible = "zmk,behavior-tap-dance";
            label = "CNTRL_ANDLAYER1";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_CONTROL>,
                <&cntrl_layer1>,
                <&cntrl_shft_layer1>;

            tapping-term-ms = <300>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        gui_layer1: gui_layer1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 1>;

            label = "GUI_LAYER1";
        };
        cntrl_layer1: cntrl_layer1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL>,
                <&macro_release>,
                <&mo 1>;

            label = "CNTRL_LAYER1";
        };
        gui_shft_1: gui_shft_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_press>,
                <&kp LS(LEFT_GUI)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LS(LEFT_GUI)>,
                <&macro_release>,
                <&mo 1>;

            label = "GUI_SHFT_1";
        };
        cntrl_shft_layer1: cntrl_shft_layer1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_press>,
                <&kp LS(LEFT_CONTROL)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LS(LEFT_CONTROL)>,
                <&macro_release>,
                <&mo 1>;

            label = "CNTRL_SHFT_LAYER1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ENTER   &kp SQT        &kp COMMA  &kp PERIOD     &kp P       &kp Y            &kp F             &kp G       &kp C      &kp R  &kp L  &mo 2
&kp ESCAPE  &kp A          &kp O      &kp E          &kp U       &kp I            &kp D             &kp H       &kp T      &kp N  &kp S  &kp MINUS
&kp TAB     &kp SEMICOLON  &kp Q      &kp J          &kp K       &kp X            &kp B             &kp M       &kp W      &kp V  &kp Z  &kp EQUAL
                                      &kp BACKSPACE  &shft_mod1  &Gui_and_lay1    &cntrl_andlayer1  &shft_mod1  &kp SPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp NUMBER_1      &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4  &kp NUMBER_5       &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8    &kp NUMBER_9     &kp NUMBER_0    &trans
&trans     &kp LEFT_CONTROL  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW    &kp DELETE        &kp HOME           &kp END         &kp LEFT_ALT     &none           &kp BACKSLASH
&trans     &kp LEFT_SHIFT    &none           &none           &none         &none              &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_SHIFT  &kp SLASH
                                             &trans          &trans        &trans             &trans            &trans             &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp CAPSLOCK  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &bt BT_PRV         &bt BT_NXT       &bt BT_SEL 0    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD                       &trans
&trans        &ext_power EP_OFF     &ext_power EP_ON      &kp K_PREVIOUS     &kp K_NEXT       &kp C_PLAY      &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &kp C_AL_LOCK
&trans        &none                 &none                 &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE      &bl BL_ON        &bl BL_OFF       &bl BL_INC       &bl BL_DEC       &kp C_SLEEP_MODE                      &trans
                                                          &trans             &trans           &trans          &trans           &trans           &trans
            >;
        };
    };
};
